* {
    box-sizing: border-box;
}

body, ul, li, p {
    margin: 0px;
    padding: 0px;
    list-style: none;
    font-size: 1.2rem;
    font-family: Arial, Helvetica, sans-serif;
}

body {
    margin-bottom: 100px;
}

a {
    text-decoration: none;
    /*colocar após definir o background de header
    adicioanr aqui sites que permitam escolher melhor o contraste
    entre as cores (https://contrast-checker.glitch.me/)*/
    color: white;
}

.header {
    background: rgb(11, 114, 139);
    display: flex;
    /*quando a tela for bem pequena, um item vai para baixo do outro*/
    flex-wrap: wrap;
    /* adiciona espaços em volta deles também,
       deslocando-os para o centro
    justify-content: space-around;
    */
    justify-content: space-between;
    align-items: center;
    padding: 20px;
}

.menu {
    display: flex;
}

.menu li {
    margin-left: 5px;
}

.menu li a {
    display: block;
    padding: 15px;
    /*para ver a áera de clique
    background-color: tomato;*/
    /*criar um botão:
    background-color: rgba(215, 245, 250, 0.4);
    border-radius: 5%;
    color: #ffffff;*/
}

.menu li a:hover {
    background-color: rgba(250, 235, 215, 0.05);
    color: white;
}

h2 {
    text-align: center;
    margin-top: 100px;
}

img {
    /*imagem responsiva: aumentar no máximo 100% de seu container*/
    max-width: 100%;
    display: block;
    min-width: 200px;
    max-height: 200px;
    background-color: gainsboro;
    margin: 0 auto;
    cursor: pointer;
}

/* Flexbox 1 */

.flexbox {
    display: flex;
    flex-wrap: wrap;
    max-width: 800px;
    margin: 0 auto;
}

.flexbox p, .flexbox label {
    text-align: center;
    /*fazer com p e label e perguntar pq não alinhou o label e 
    funcionou só com o p
    explicar que o label é inline e falar que tem duas soluções:
    mudar para "p" ou mudar o display para block*/
    display: block;
}

.flexbox > div {
    flex: 1 1 200px;
    margin: 10px;
}

/* GRID 1 */
.grid1 {
    display: grid;
    /* 1fr é uma fração, como se estivesse dividindo a coluna em 3*/
    grid-template-columns: 1fr 1fr 1fr; /* ou repeat(3, 1fr)*/
    max-width: 800px;
    padding: 10px;
    margin: 0 auto;
    /*o de baixo faz vazar 10px de cada lado,
    pois ele provê os 20px de espaço.
    Então, mude o max-width para 780px
    Mas é melhor fazer: padding de 10px*/
    gap: 20px;
}
.grid1 > div:nth-child(-n + 3), .grid1 > div.anuncio {
    text-align: center;
}
.grid1 > div {
    border-bottom: 0.1rem solid rgba(128, 128, 128, 0.15);
}
/* [class^="grid"] > div  {    border: 0.1rem solid black; } */
img {
    border-radius: 2%;
}
img:hover {
    transform: scale(1.05);
    transition: transform .5s;
}
.grid3 > div:hover {
    transform: scale(1.05);
    transition: transform .5s;
}
/*nth child: escolhe qual item que quer fornecer estilo
pode utilizar fórmula tbm: n+4=à partir do 4º item*/
.grid1 > div:nth-child(n+4) {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
    /*alinhar os itens na vertical:*/
    align-items: center;
}

.grid1 > label {
    display: block;
}
.grid1 > div:nth-child(2n+5) {
    display: grid;
}
.grid1 > div:nth-child(2n+4) > label {
    grid-column: 1;
    grid-row: 1;
}
.grid1 > div:nth-child(2n+4) > img {
    grid-column: 2;
    grid-row: 1;
}
/* para o display:block fazer diferença tem que ser mais específico
que o anterior, ou seja, ao invés de .anuncio, tem que ser:*/
.grid1 > div.anuncio {
    grid-column: 1/2;
    grid-row: 2/5;
    /* para ver:
    border: 1px solid red;*/
    display: block;
    align-content: center;
    text-align: justify;
}

@media (max-width: 600px) {
    .grid1 {
        grid-template-columns: repeat(2, 1fr);
    }
    .grid1 > div:nth-child(n+4) {
        display: block;
    }
    .grid1 > div.anuncio {
        grid-column: auto;
        grid-row: auto;
        order: -1;
    }   
}

/* Grid 2*/

.grid2 {
    display: grid;
    grid-template-columns: 1fr 200px;
    gap: 20px;
    max-width: 800px;
    padding: 10px;
    margin: 0 auto;
    text-align: center;
}


.sidebar > div {
    margin-bottom: 10px;;
}

@media (max-width: 600px) {
    .grid2 {
        grid-template-columns: 1fr;
    }
    .sidebar {
        display: flex;
        overflow: scroll;
    }
    .sidebar > div {
        flex: 1 0 200px;
        margin: 0 10px;
    }
}

/* Grid 3 */
.grid3 {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
    margin: 0 auto;
    max-width: 800px;
    padding: 10px;;
}

.grid3-item:nth-child(1) {
    grid-row: 1/3;
    align-items: center;
}

.grid3-item {
    display: grid;

}
.grid3-item img {
    /* onde posicionar */
    grid-column: 1;
    grid-row: 1/3;
    align-self: self-end;
}

.grid3-item p {
    background: rgba(0,0,0,0.6);
    padding: 10px;
    color: white;
    grid-column: 1;
    grid-row: 2/3;
    align-self: self-end;
}
